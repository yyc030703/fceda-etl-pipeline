import json
import pandas as pd
import re
import boto3
from io import StringIO
from rapidfuzz import process, fuzz

s3 = boto3.client('s3')

VALID_CITIES = [
    "Alexandria", "Annandale", "Arlington", "Baileys Crossroads", "Burke", "Centreville",
    "Chantilly", "Clifton", "Dunn Loring", "Falls Church", "Fairfax",
    "Fairfax Station", "Fort Belvoir", "Franconia", "Great Falls",
    "Herndon", "Kingstowne", "Leesburg", "Lincolnia", "Lorton", "Manassas", "McLean",
    "Merrifield", "Mount Vernon", "Oak Hill", "Oakton", "Reston",
    "Seven Corners", "South Riding", "Springfield", "Sterling", "Tysons Corner",
    "Vienna", "West McLean", "Woodbridge"
]

    # --- Clean individual row ---
def clean_row(row):
    street1 = str(row.get("Street1", "") or "")
    street2 = str(row.get("Street2", "") or "")
    city = str(row.get("City", "") or "")
    building_name = str(row.get("BuildingName", "") or "")

    # Standardize all inputs
    street1 = street1.strip()
    street2 = street2.strip()
    building_name = building_name.strip()
    city = city.strip()

    street_keywords = r"\b(Rd|St|Blvd|Way|Dr|Hwy|Ave|Ln|Ct|Cir|Pl|Pkwy|Parkway|Plaza|Trail|Route|Rt|Ter|Sq|Square|Park|Highway|Terrace|Trail|Lane|Way|Court|Circle|Pike|Drive|Road|Street|Cluster|Pk|Terr|Boulevard|Avenue|Place)\b"
    suite_keywords = r"\b(Suite\s*\d+\w*|Ste\s*\d+\w*|Apt\s*\d+\w*|Apartment\s*\d+\w*|#\s*\d+\w*|Unit\s*\d+\w*)\b"
    suite_trailing_pattern = r"(#?\s*\d+[A-Za-z]?)$"
    po_box_pattern = r"\b(P\.?\s*O\.?\s*Box\s*\d+)\b"
    care_of_pattern = r"\b(C\/O|C\s*\/\s*O|Care\s*Of|Attention\s*:|Att\s*:|Co\.)\s*([^\d]+?)(?=\d|$)"
    street_type_only = ["Street", "Terrace", "Road", "Dr", "Drive", "Ave", "Avenue", "Ln", "Lane", 
                        "Court", "Circle", "Place", "Boulevard", "Blvd", "Highway", "Hwy", "Pkwy", "Parkway"]

    # --- STEP 1: First, handle cases where entire address is in building_name and street1 is a street type ---
    if building_name and street1 in street_type_only:
        if re.search(r"\d+", building_name):  # Ensure building_name has numbers (likely address)
            # Move building_name to street1 and append street type
            street1 = building_name + street1
            building_name = ""

    # --- STEP 2: Handle when building_name is a number and street1 starts with text ---
    if building_name and building_name.strip().isdigit() and street1 and not street1[0].isdigit():
        street1 = building_name + street1
        building_name = ""

    # --- STEP 3: Fix for C/O records ---
    care_of_match = re.search(care_of_pattern, street1, re.IGNORECASE)
    if care_of_match:
        prefix = care_of_match.group(0)
        remaining = street1[len(prefix):].strip()
        
        # Move C/O to building name
        if not building_name:
            building_name = prefix.strip()
        else:
            building_name = prefix.strip() + " " + building_name.strip()
            
        # Set remaining text as street1
        street1 = remaining
    
    street1, street2 = extract_po_box(street1, street2, po_box_pattern)
    building_name, street2 = extract_po_box(building_name, street2, po_box_pattern, prefer_existing=street2)

    # --- Handle Plaza America Tower type cases ---
    building_name, street1, street2 = handle_plaza_america_cases(building_name, street1, street2)

    # --- Handle case where street address is in building name ---
    if building_name and re.search(r"^\d+", building_name) and (not street1.strip() or street1.strip() in ["Street", "Terrace", "Road", "Drive", "Avenue", "Lane", "Court", "Circle", "Place", "Boulevard", "Highway"]):
        # If building name starts with a number and street1 is empty OR just a street type
        # Move building name to street1 and street1 (if it's a street type) to street2
        if street1.strip() in ["Street", "Terrace", "Road", "Drive", "Avenue", "Lane", "Court", "Circle", "Place", "Boulevard", "Highway"]:
            street2 = street1.strip()
        street1 = building_name
        building_name = ""
    elif not re.search(street_keywords, street1, re.IGNORECASE) and re.search(street_keywords, building_name, re.IGNORECASE):
        temp = building_name
        building_name = street1 if street1.strip() else ""
        street1 = temp

    # --- Handle case where street1 has no street keywords but street2 does ---
    if not re.search(street_keywords, street1, re.IGNORECASE) and re.search(street_keywords, street2, re.IGNORECASE):
        # Special case for "1005 North Sycamore" in building name and "Street" in street1
        if street1.strip() in ["Street", "Terrace", "Road", "Drive", "Avenue", "Lane", "Court", "Circle", "Place", "Boulevard", "Highway"]:
            street2 = street1.strip()
            street1 = building_name
            building_name = ""
        # Otherwise handle normally
        else:
            # If building name is empty, move street1 to building name
            if not building_name.strip():
                building_name = street1
            else:
                # If there's already a building name, append street1 to building name if it looks like a building name
                if not re.search(r"\d", street1): # No numbers usually means it's not a street address
                    building_name = building_name + " " + street1 if building_name else street1
            
            street1 = street2
            street2 = ""

    # --- Extract suite numbers ---
    street1, street2 = extract_suite(street1, street2, suite_keywords, suite_trailing_pattern)
    
    # --- Fix numeric building name (e.g., 314) ---
    if building_name.strip().isdigit() and not street1.strip():
        street1 = building_name + " " + street2 if street2 else building_name
        building_name = ""
        street2 = ""

    building_name, street2 = extract_suite_in_building(building_name, street2, suite_keywords)

    # --- Final processing pass to fix specific patterns ---
    # Handle case where street1 is empty but building_name has street address pattern
    if not street1 and building_name and re.search(r"^\d+\s+\w+", building_name):
        # Building name starts with street number pattern (e.g., "1078 Great Passage")
        street1 = building_name
        building_name = ""
    
    # Handle case where street1 is just a street type word and building_name has the rest of the address
    elif street1 in street_type_only and building_name and re.search(r"\d+", building_name):
        street1 = building_name + " " + street1
        building_name = ""
    
    # Handle Blvd, St, etc. in street1 when building_name looks like a street address
    elif street1 in ["Blvd", "St", "Rd", "Dr", "Ave", "Ln", "Ct", "Cir", "Pl", "Ter", "Hwy", "Pkwy"] and building_name and re.search(r"\d+", building_name):
        # The street type got separated
        street1 = building_name + street1
        building_name = ""
    
    # --- Handle case where street2 is a street type and should be combined with street1 ---
    if street2 in street_type_only and street1:
        street1 = street1 + " " + street2
        street2 = ""
    
    # --- Final cleanup ---
    street1 = street1.strip()
    street2 = street2.strip()
    building_name = building_name.strip()
    city = city.strip()
    if building_name and re.search(r"^\d+", building_name) and street1.strip() in ["Street", "Terrace", "Road", "Drive", "Avenue", "Lane", "Court", "Circle", "Place", "Boulevard", "Highway"]:
        street2 = street1.strip()
        street1 = building_name
        building_name = ""
    
    # --- Final cleanup ---
    street1 = street1.strip()
    street2 = street2.strip()
    building_name = building_name.strip()
    city = city.strip()

    return pd.Series([street1, street2, building_name, city])

# --- Helper functions ---
def extract_po_box(source, street2, pattern, prefer_existing=""):
    match = re.search(pattern, source, re.IGNORECASE)
    if match:
        if not prefer_existing.strip():
            street2 = match.group(0)
        source = re.sub(pattern, "", source, flags=re.IGNORECASE).strip()
    return source, street2

def handle_plaza_america_cases(building_name, street1, street2):
    """Handles special cases like Plaza America Tower"""
    
    # Check for "Plaza America Tower" type pattern in street1
    plaza_pattern = r"(Plaza\s+\w+\s+Tower\s+[IVX]+)"
    plaza_match = re.search(plaza_pattern, street1, re.IGNORECASE)
    
    if plaza_match:
        # Extract the tower name
        tower_name = plaza_match.group(1)
        
        # Remove the tower name from street1
        street1 = re.sub(plaza_pattern, "", street1, flags=re.IGNORECASE).strip()
        
        # If there's a number address after removing the tower name, it's valid street1
        if re.search(r"^\d+", street1):
            # Move tower name to building_name
            building_name = tower_name
        else:
            # If street2 looks like a proper address and street1 doesn't after removal
            if re.search(r"^\d+", street2) and not re.search(r"^\d+", street1):
                building_name = tower_name
                street1 = street2
                street2 = ""
            else:
                # Keep the original street1 if removing tower name makes it invalid
                building_name = tower_name
    
    # Handle suite/apartment separation in both street fields
    suite_pattern = r"(Ste|Suite|Apt|Unit|#)\s*(\d+\w*)"
    suite_match_street1 = re.search(suite_pattern, street1, re.IGNORECASE)
    
    if suite_match_street1:
        suite_text = suite_match_street1.group(0)
        street1 = re.sub(r"\s*" + re.escape(suite_text) + r"\s*", "", street1).strip()
        
        if not street2:
            street2 = suite_text
    
    return building_name, street1, street2

def extract_suite(street1, street2, suite_keywords, trailing_pattern):
    suite_match = re.search(suite_keywords, street1, re.IGNORECASE)
    if suite_match:
        new_street2 = suite_match.group(0)
        if not street2.strip():
            street2 = new_street2
        street1 = re.sub(suite_keywords, "", street1).strip()
    else:
        trailing_match = re.search(trailing_pattern, street1.strip())
        if trailing_match:
            new_street2 = trailing_match.group(0)
            if not street2.strip():
                street2 = new_street2
            street1 = street1[:street1.rfind(new_street2)].strip()
    return street1, street2

def extract_suite_in_building(building_name, street2, suite_keywords):
    suite_in_building = re.search(suite_keywords, building_name, re.IGNORECASE)
    if suite_in_building:
        if not street2.strip():
            street2 = suite_in_building.group(0)
        building_name = re.sub(suite_keywords, "", building_name).strip()
    return building_name, street2

# --- City cleaning ---
def clean_city(c):
    if pd.isna(c):
        return ""
    c = str(c).strip().upper()
    c = re.sub(r"[^\w\s]", "", c)
    c = re.sub(r"\s+", " ", c)
    return c

def is_valid_format(c):
    return not any([
        c == "",
        c.isdigit(),
        any(x in c for x in ["SUITE", "FLOOR", "PLACE", "UNIT", "BUILDING", "STREET", "DRIVE", "LANE", "BLVD"]),
        len(c.split()) > 4
    ])

def match_city(city):
    cleaned = clean_city(city)
    if is_valid_format(cleaned):
        match = process.extractOne(cleaned.title(), VALID_CITIES, scorer=fuzz.WRatio)
        if match and match[1] >= 75:
            return match[0]
    return ""

def format_address(row):
    parts = [
        str(row.get("Street1", "")),
        str(row.get("City_Corrected", "")),
        str(row.get("State", "")),
        str(row.get("ZIPCODE", ""))
    ]
    return ', '.join([part.strip() for part in parts if part.strip()])

# --- Main Lambda handler ---
def lambda_handler(event, context):
    bucket = "merged-fceda-data"
    input_key = "merged_data/joined_df.csv"
    output_key = "merged_data/standardized_address.csv"

    try:
        obj = s3.get_object(Bucket=bucket, Key=input_key)
        df = pd.read_csv(obj['Body'], dtype=str)

        df = df.replace(pd.NA, "", regex=True)
        df = df.replace("nan", "", regex=False)

        df[["Street1", "Street2", "BuildingName", "City"]] = df.apply(clean_row, axis=1)

        df["City"] = df["City"].apply(match_city)

        for col in ["State", "ZIPCODE"]:
            if col not in df.columns:
                df[col] = ""

        df["Full_Address"] = df.apply(format_address, axis=1)

        column_order = ["EntityID", "Name", "Status", "IncorpDate", "IncorpState", "BuildingName",
                        "Street1", "Street2", "City", "State", "BusinessType", "ZIPCODE",
                        "Full_Address", "Shape__Area", "Shape__Length"]
        df = df[[col for col in column_order if col in df.columns]]

        try:
            s3.delete_object(Bucket=bucket, Key=output_key)
        except s3.exceptions.NoSuchKey:
            pass

        csv_buffer = StringIO()
        df.to_csv(csv_buffer, index=False)
        s3.put_object(Bucket=bucket, Key=output_key, Body=csv_buffer.getvalue())

        return {
            'statusCode': 200,
            'body': json.dumps(f"Standardized address file saved to s3://{bucket}/{output_key}")
        }

    except s3.exceptions.NoSuchKey:
        return {
            'statusCode': 404,
            'body': json.dumps(f"Input file {input_key} not found in bucket {bucket}")
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(f"Error: {str(e)}")
        }
